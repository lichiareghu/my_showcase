AWSTemplateFormatVersion: '2010-09-09'
Description: Portfolio Showcase - EC2 + Docker Compose (pull from Git, run db:push)

Parameters:
  InstanceType:
    Type: String
    Default: t2.medium
  GitRepoUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitRepoUrl
  GitPAT:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitPAT
  DatabaseUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: DatabaseUrl
  SessionSecret:
    Type: AWS::SSM::Parameter::Value<String>
    Default: SessionSecret

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

      Policies:
        - PolicyName: AllowSSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: MyGeneratedKeyPair

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0          

  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref MyKeyPair
      SubnetId: !Ref MyPublicSubnet
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      LaunchTemplate:
        LaunchTemplateName: showcase_template
        Version: 1
      Tags:
        - Key: Name
          Value: myshowcase
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          set -eux

          # Update system packages
          apt-get update -y

          # Install required packages
          apt-get install -y openssh-server

          # Generate SSH key pair for the instance
          mkdir -p /home/ubuntu/.ssh
          ssh-keygen -t rsa -b 4096 -f /home/ubuntu/.ssh/id_rsa -N "" -C "instance-generated-key"
          chown -R ubuntu:ubuntu /home/ubuntu/.ssh
          chmod 700 /home/ubuntu/.ssh
          chmod 600 /home/ubuntu/.ssh/id_rsa
          chmod 644 /home/ubuntu/.ssh/id_rsa.pub

          # Add public key to authorized_keys for ubuntu user
          cat /home/ubuntu/.ssh/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys
          chmod 600 /home/ubuntu/.ssh/authorized_keys

          # Start SSH service
          systemctl enable ssh
          systemctl start ssh

          # Store the private key in a location accessible to CloudFormation outputs
          cat /home/ubuntu/.ssh/id_rsa > /tmp/instance_private_key
          cat /home/ubuntu/.ssh/id_rsa.pub > /tmp/instance_public_key

          # Store SSH keys in AWS Systems Manager Parameter Store for retrieval
          aws ssm put-parameter --name "InstancePrivateKey" --value "$(cat /home/ubuntu/.ssh/id_rsa)" --type "SecureString" --overwrite --region ${AWS::Region} || true
          aws ssm put-parameter --name "InstancePublicKey" --value "$(cat /home/ubuntu/.ssh/id_rsa.pub)" --type "String" --overwrite --region ${AWS::Region} || true

          # Clone or update the latest code
          if [ ! -d "/tmp/repo" ]; then
            git clone ${GitRepoUrl} /tmp/repo
          else
            cd /tmp/repo
            git fetch origin
            git reset --hard origin/main
          fi

          cd /tmp/repo

          # Create .env file with environment variables
          cat > .env << EOF
          DATABASE_URL=${DatabaseUrl}
          SESSION_SECRET=${SessionSecret}
          NODE_ENV=production
          PORT=5000
          EOF

          # Stop and remove existing containers
          docker-compose down || true
          docker system prune -f || true

          # Force clean build with no cache
          docker-compose build --no-cache --pull

          # Start services with Docker Compose
          docker-compose up -d

          # Wait for app container to be ready
          ATTEMPTS=24
          SVC=app
          while [ $ATTEMPTS -gt 0 ]; do
            if docker-compose ps --status running | grep -q "$SVC"; then
              break
            fi
            sleep 5
            ATTEMPTS=$((ATTEMPTS - 1))
          done

          # Run database schema push
          set +e
          docker-compose exec -T $SVC npm run db:push
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            echo "db:push failed with code $RC; continuing boot (check logs)"
          fi

          # Show status and logs
          echo "=== Container Status ==="
          docker-compose ps
          echo "=== Recent Logs ==="
          docker-compose logs --tail=50 || true

Outputs:

  EC2InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref WebInstance
    Export:
      Name: EC2InstanceId

  VPCId:
    Description: ID of the VPC
    Value: !Ref MyVPC
    Export:
      Name: VPCId

  SubnetId:
    Description: ID of the Public Subnet
    Value: !Ref MyPublicSubnet
    Export:
      Name: SubnetId

  SecurityGroupId:
    Description: ID of web security group
    Value: !Ref WebSecurityGroup
    Export:
      Name: SecurityGroupId

  InternetGatewayId:
    Description: ID of the Internet Gateway
    Value: !Ref MyInternetGateway
    Export:
      Name: InternetGatewayId

  RouteTableId:
    Description: ID of the Public Route Table
    Value: !Ref MyRouteTable
    Export:
      Name: RouteTableId

  InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt WebInstance.PublicIp

  InstancePublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt WebInstance.PublicDnsName

  WebURLPort80:
    Description: HTTP URL (Port 80)
    Value: !Sub http://${WebInstance.PublicDnsName}

  WebURLPort80:
    Description: Application URL (Port 80)
    Value: !Sub http://${WebInstance.PublicDnsName}

  SSHConnectionString:
    Description: SSH connection command for the instance
    Value: !Sub ssh -i /path/to/private_key ubuntu@${WebInstance.PublicDnsName}

  SSHInstructions:
    Description: Instructions for SSH access
    Value: !Sub |
      To connect via SSH:
      1. The instance has generated its own SSH key pair
      2. The private key is stored in /home/ubuntu/.ssh/id_rsa on the instance
      3. You can access it via AWS Systems Manager Session Manager
      4. Or use the AWS CLI: aws ssm start-session --target ${WebInstance}
      5. Once connected, you can copy the private key: sudo cat /home/ubuntu/.ssh/id_rsa
      6. Or retrieve from SSM: aws ssm get-parameter --name "/myshowcase/instance-private-key" --with-decryption

  SSMPrivateKeyParameter:
    Description: SSM Parameter name for the private SSH key
    Value: "/myshowcase/instance-private-key"

  SSMPublicKeyParameter:
    Description: SSM Parameter name for the public SSH key
    Value: "/myshowcase/instance-public-key"