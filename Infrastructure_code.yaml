AWSTemplateFormatVersion: '2010-09-09'
Description: Portfolio Showcase - EC2 + Docker Compose (pull from Git, run db:push)

Parameters:
  InstanceType:
    Type: String
    Default: t2.medium
  GitRepoUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitRepoUrl
  GitPAT:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitPAT

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

      Policies:
        - PolicyName: AllowSSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: MyGeneratedKeyPair

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-000742a066e2fb5f2
      InstanceType: !Ref InstanceType
      KeyName: !Ref MyKeyPair
      SubnetId: !Ref MyPublicSubnet
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      LaunchTemplate:
        LaunchTemplateName: LaunchBasic
        Version: 1
      Tags:
        - Key: Name
          Value: myshowcase
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          set -eux

          # Update system packages
          apt-get update -y

          # Install Git if not present
          if ! command -v git &> /dev/null; then
           apt-get install -y git
          fi

          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            apt-get install -y \
              ca-certificates \
              curl \
              gnupg \
              lsb-release

            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg

            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

            apt-get update -y
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          fi

          # Start and enable Docker
          systemctl enable docker
          systemctl start docker

          # Add ubuntu user to docker group
          usermod -aG docker ubuntu

          # Clone or update the latest code into /tmp/repo and run Dockerfile
          if [ ! -d "/tmp/repo" ]; then
            git clone ${GitRepoUrl} /tmp/repo
            else
            cd /tmp/repo
            git fetch origin
            git reset --hard origin/main
          fi

          cd /tmp/repo

          # Force clean build with no cache
          docker build --no-cache --pull -t my_showcase_image .

          # Run the new container
          docker run -d --name my_showcase -p 80:80 my_showcase_image

Outputs:

  EC2InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref WebInstance
    Export:
      Name: EC2InstanceId

  VPCId:
    Description: ID of the VPC
    Value: !Ref MyVPC
    Export:
      Name: VPCId

  SubnetId:
    Description: ID of the Public Subnet
    Value: !Ref MyPublicSubnet
    Export:
      Name: SubnetId

  SecurityGroupId:
    Description: ID of web security group
    Value: !Ref WebSecurityGroup
    Export:
      Name: SecurityGroupId

  InternetGatewayId:
    Description: ID of the Internet Gateway
    Value: !Ref MyInternetGateway
    Export:
      Name: InternetGatewayId

  RouteTableId:
    Description: ID of the Public Route Table
    Value: !Ref MyRouteTable
    Export:
      Name: RouteTableId

  InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt WebInstance.PublicIp

  InstancePublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt WebInstance.PublicDnsName

  WebURLPort80:
    Description: HTTP URL (Port 80)
    Value: !Sub http://${WebInstance.PublicDnsName}

  WebURLPort5000:
    Description: Application URL (Port 5000)
    Value: !Sub http://${WebInstance.PublicDnsName}:5000